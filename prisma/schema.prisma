// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// NextAuth Schema

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  refresh_token_expires_in Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  bio           String? @db.Text
  age           Int?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  posts        Post[] 
  votes         Vote[]
  places        Coworking[]
  createdAt     DateTime  @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Coworking {
  id            String    @id @default(cuid())
  userId       String?
  user         User?      @relation(fields: [userId], references: [id])
  placeId       String?  @unique    
  longitude     Float?
  latitude      Float?
  name          String
  address       String
  city          String
  phoneNumber   String?
  website       String?
  description   String
  openingHours  OpeningHour[]
  imagesSelected imageSelected[]
  userImages   UserImage[] 
  comments      Comment[]
  votes         Vote[]     
  calmRating    Int?         
  equipmentRating  Int?       
  foodAndDrinksRating  Int?
  feelingRating Int?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model OpeningHour {
  id            String      @id @default(cuid())
  coworkingId   String      @map("coworking_id")
  coworking     Coworking   @relation(fields: [coworkingId], references: [id], onDelete: Cascade)
  weekdayText   String[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}


model Comment {
  id       String @id @default(cuid())
  content  String @db.Text
  placeId  String // This can be a relation to a Place model if you have one.
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes    Vote[]
  place    Coworking   @relation(fields: [placeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id          String    @id @default(cuid())
  commentId   String?   // Retaining this as you might want to attach votes to comments.
  comment     Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  coworkingId String
  coworking   Coworking @relation(fields: [coworkingId], references: [id], onDelete: Cascade)
  calmRating  Int?         // Rating for calm out of 5
  equipRating Int?         // Rating for equipment out of 5
  foodRating  Int?         // Rating for food and drink out of 5
  feelingRating Int?
  createdAt   DateTime  @default(now())
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  published Boolean  @default(false)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model imageSelected {
  id          String    @id @default(cuid())
  url         String
  coworkingId String
  coworking   Coworking @relation(fields: [coworkingId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model UserImage {
    id          String    @id @default(cuid())
    url         String    // This will store the URL to the actual image on the storage service.
    coworkingId String
    coworking   Coworking @relation(fields: [coworkingId], references: [id], onDelete: Cascade)
    userId      String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}