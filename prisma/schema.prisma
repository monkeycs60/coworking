// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  birthday                   String?       // Optional since it's empty in the example
  email                      String?        @unique
  externalId                 String?
  firstName                  String?
  lastName                   String?
  name                       String?
  createdAt     DateTime?
  lastSignInAt  DateTime?
  profileImageUrl            String?
  username                   String?   
  image         String?
  comments      Comment[]
  posts        Post[] 
  reviews       Review[]
  places        Coworking[]
  userImages    UserImage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Coworking {
  id            String    @id @default(cuid())
  userId       String?
  user         User?      @relation(fields: [userId], references: [id])
  placeId       String?  @unique    
  longitude     Float?
  latitude      Float?
  name          String
  address       String
  city          String
  phoneNumber   String?
  website       String?
  description   String
  openingHours  OpeningHour[]
  imagesSelected imageSelected[]
  userImages   UserImage[] 
  comments      Comment[]
  espressoPrice   String? 
  facility FacilityType?
  hasPrivacy      Boolean @default(false)
  hasParking      Boolean @default(false)
  hasWiFi      Boolean @default(false)
  hasExterior     Boolean @default(false)
  hasPlugs        Boolean @default(false)
  hasHandicap     Boolean @default(false)
  smallTables     Boolean @default(false)
  largeWorktables     Boolean @default(false)
  counterSeats     Boolean @default(false)
  standingTables     Boolean @default(false)
  outdoorSeating     Boolean @default(false)
  soloCoworker     Boolean @default(false)
  smallGroup     Boolean @default(false)
  bigGroup     Boolean @default(false)
  morningDuration     Boolean @default(false)
  afternoonDuration     Boolean @default(false)
  fullDuration     Boolean @default(false)
  snacksPossibility     Boolean @default(false)
  lunchPossibility     Boolean @default(false)
  souperPossibility     Boolean @default(false)
  drinksPossibility     Boolean @default(false)
  alcoolPossibility     Boolean @default(false)
  wifiQuality      WifiQualityType? 
  music            MusicType? 
  reviews       Review[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@index([createdAt])
}

model OpeningHour {
    id          String    @id @default(cuid())
    coworkingId String    @map("coworking_id")
    coworking   Coworking @relation(fields: [coworkingId], references: [id], onDelete: Cascade)
    openTime    String?    // Heure d'ouverture (format HH:MM)
    closeTime   String?    // Heure de fermeture (format HH:MM)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}



model Comment {
  id       String @id @default(cuid())
  content  String @db.Text
  placeId  String // This can be a relation to a Place model if you have one.
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  place    Coworking   @relation(fields: [placeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  published Boolean  @default(false)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model imageSelected {
  id          String    @id @default(cuid())
  url         String
  coworkingId String
  coworking   Coworking @relation(fields: [coworkingId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model UserImage {
    id          String    @id @default(cuid())
    url         String    // This will store the URL to the actual image on the storage service.
    coworkingId String
    coworking   Coworking @relation(fields: [coworkingId], references: [id], onDelete: Cascade)
    userId      String?
    user        User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Review {
  id          String    @id @default(cuid())
  content     String?    @db.Text
  userId      String?
  placeId       String?
  user        User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  coworkingId String
  coworking   Coworking @relation(fields: [coworkingId], references: [id], onDelete: Cascade)
  calmRating  Int       
  equipRating Int       
  foodRating  Int       
  feelingRating Int     
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

    @@unique([userId, coworkingId])
}

enum FacilityType {
  IS_CAFE
  IS_HOTEL
  IS_LIBRARY
  IS_THIRD_SPACE
  IS_OTHER_TYPE
}

enum WifiQualityType {
  HIGH_WIFI
  MEDIUM_WIFI
  LOW_WIFI
}

enum MusicType {
  NO_MUSIC
  DISCRETE_MUSIC
  RANDOM_MUSIC
  LOUD_MUSIC
}