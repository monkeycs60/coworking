// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  city                       String?
  username                   String?        @unique   
  password                   String?
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  comments      Comment[]
  posts        Post[] 
  reviews       Review[]
  places        Coworking[]
  userImages    UserImage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Coworking {
  id               String          @id @default(cuid())
  userId           String         // This is the ID of the user who created the place.
  user             User           @relation(fields: [userId], references: [id])
  placeId          String         @unique    
  longitude        Float
  latitude         Float
  name             String
  address          String
  city             String
  phoneNumber      String?
  website          String?
  description      String
  openingHours     OpeningHour[]
  imageSelectedUrls   imageSelectedUrls[]
  userImages       UserImage[] 
  musicLevel       MusicLevel[]
  internetQuality  InternetQuality[]
  workComforts          WorkComfort[]
  workspaceCompositions WorkspaceComposition[]
  hasToCalls            HasToCall[]
  drinksAndFoods        DrinksAndFood[]
  comments         Comment[]
  espressoPrice    Float? 
  establishmentType EstablishmentType?
  facilities       FacilityType[] // Assuming many-to-many relation
  reviews          Review[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  @@index([createdAt])
}

model OpeningHour {
    id          String    @id @default(cuid())
    coworkingId String    @map("coworking_id")
    coworking   Coworking @relation(fields: [coworkingId], references: [id], onDelete: Cascade)
    openTime    String?    // Heure d'ouverture (format HH:MM)
    closeTime   String?    // Heure de fermeture (format HH:MM)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model imageSelectedUrls {
  id          String    @id @default(cuid())
  url         String
  coverImage  Boolean   @default(false)
  coworkingId String
  coworking   Coworking @relation(fields: [coworkingId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum EstablishmentType {
  HOTEL_LOBBY
  CAFE
  RESTAURANT_BAR
  THIRD_PLACE
  LIBRARY
  OTHER
}

enum FacilityType {
  ACCESSIBLE
  PARKING
  TERRACE
  OUTLETS
  BOOTH
}

enum MusicLevel {
  NoMusic
  DiscreteMusic
  RandomMusic
  LoudMusic
}

enum InternetQuality {
  HighWifi
  MediumWifi
  LowWifi
  NoWifi
}

enum WorkComfort {
  SoloDesk
  SmallGroupDesk
  LargeGroupDesk
}

enum WorkspaceComposition {
  PrivateBooths
  LargeTables
}

enum HasToCall {
  CallFriendly
  CallImpossible
}

enum DrinksAndFood {
  Snacks
  Meals
  SoftDrinks
  AlcoholicDrinks
}

model Comment {
  id       String @id @default(cuid())
  content  String @db.Text
  placeId  String // This can be a relation to a Place model if you have one.
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  place    Coworking   @relation(fields: [placeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String   @db.Text
  published Boolean  @default(false)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserImage {
    id          String    @id @default(cuid())
    url         String    // This will store the URL to the actual image on the storage service.
    coworkingId String
    coworking   Coworking @relation(fields: [coworkingId], references: [id], onDelete: Cascade)
    userId      String?
    user        User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Review {
  id          String    @id @default(cuid())
  content     String?    @db.Text
  userId      String?
  placeId       String?
  user        User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  coworkingId String
  coworking   Coworking @relation(fields: [coworkingId], references: [id], onDelete: Cascade)
  calmRating  Int       
  equipRating Int       
  foodRating  Int       
  feelingRating Int     
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

    @@unique([userId, coworkingId])
}

enum Role {
  USER
  MODERATOR
  ADMIN
}


